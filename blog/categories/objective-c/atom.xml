<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Objective-C | ほくろん.com]]></title>
  <link href="http://hokuron.github.io/blog/categories/objective-c/atom.xml" rel="self"/>
  <link href="http://hokuron.github.io/"/>
  <updated>2014-05-08T12:33:15+09:00</updated>
  <id>http://hokuron.github.io/</id>
  <author>
    <name><![CDATA[Takuma Shimizu]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NSDictionaryを使ってインスタンスを作成する]]></title>
    <link href="http://hokuron.github.io/blog/2014/05/08/nsdictionary-properties/"/>
    <updated>2014-05-08T10:19:24+09:00</updated>
    <id>http://hokuron.github.io/blog/2014/05/08/nsdictionary-properties</id>
    <content type="html"><![CDATA[<p>引数として<code>NSDictionary</code>を渡せば一括でプロパティを設定する、ということやってくれるメソッドを定義していきます。</p>

<p><code>UILocalNotification</code>を例に使って定義していきます。</p>

<p>``` objc UILocalNotification+HKROption.h
@interface UILocalNotification (HKROption)</p>

<ul>
<li>(instancetype)hkr_localNotificationWithOptions:(NSDictionary *)properties;</li>
</ul>


<p>@end
```</p>

<p>``` objc UILocalNotification+HKROption.m</p>

<h1>import &lt;objc/runtime.h> // (A)</h1>

<p>@implementation UILocalNotification (HKROption)</p>

<ul>
<li>(instancetype)hkr_localNotificationWithOptions:(NSDictionary <em>)properties
{
  UILocalNotification </em>notif = [UILocalNotification new];
  [properties enumerateKeysAndObjectsUsingBlock:^(id key, id obj, BOOL *stop) {
      // (B)
      if (class_getProperty([notif class], [key UTF8String]) != NULL) {
          // &copy;
          if (obj == [NSNull null]) {
              [notif setValue:nil forKey:key];
          }
          else {
              [notif setValue:obj forKey:key];
          }
      }
  }];
  return notif;
}</li>
</ul>


<p>@end
```</p>

<p>ポイントとしては<code>(B)</code>の<code>class_getProperty()</code>関数を使っているところです。第一引数のクラス内に第二引数が示すプロパティが定義されているか調べています。定義されていなければ<code>NULL</code>が返ります。<br/>
この関数を使うには必ず<code>(A)</code>のように<code>objc/runtime.h</code>を読み込んでおきます。<br/>
<code>NSDictionary</code>は<code>nil</code>を指定できないため、<code>(C)</code>で<code>[NSNull null]</code>が値としてきた場合、代わりに<code>nil</code>をセットする処理をしています。</p>

<p>Objective-Cの特徴的な名前付き引数を殺してしまいますが、<code>UILocalNotification</code>のようにすべてのプロパティを埋めることがあまりないクラスとは相性が良いかと思います。</p>

<p>余談ですが、RubyというかRailsでこの手法を目にすることが多く、Objective-Cの<code>KVC</code>と相性が良さそうなので今回このエントリーを思い立ちました。<br/>
さらに余談ですが、Rubyの場合は最後の引数が<code>Hash</code>型(ObjCの<code>NSDictionary</code>)の場合、ハッシュリテラル<code>{}</code>は省略可能で、シンボル表記と相まって名前付き引数のように列挙できます。Rubyはこういう地味に便利な機構が多く備わっています。すばらしい…<br/>
もっと言えば、ruby 2.0からはちゃんとキーワード引数が使えます。すばらしい…</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Modern Objective-Cの新しいEnumの記述方法]]></title>
    <link href="http://hokuron.github.io/blog/2014/05/08/wwdc2012-ns-enum/"/>
    <updated>2014-05-08T00:09:21+09:00</updated>
    <id>http://hokuron.github.io/blog/2014/05/08/wwdc2012-ns-enum</id>
    <content type="html"><![CDATA[<p>WWDC 2012のセッションの一つである<strong>Modern Objective-C</strong>から<strong>Enum</strong>の新しい書き方を紹介してみようと思います。</p>

<p>これまでObjective-Cの明示的なEnumの書き方は、C言語と同じように列挙したのち、integer系のラッパーなどでその列挙を表す型を定義していました。</p>

<p>``` objc
// 広告の位置を指定するための位置候補
enum
{</p>

<pre><code>CTRAdPositionViewTop = 0, // default
CTRAdPositionViewBottom
</code></pre>

<p>};
typedef NSUInteger CTRAdPosition;
```</p>

<p>しかし、これでは、入力しようとしている型と関係のない、他所でenum列挙された項目が補完候補に登場してしまうので煩雑になってしまいます。<br/>
特にUIViewAnimationなんか打つと、目的の項目を探すほうが手間になるほど。しかし、Xcode4.4以降は、今から説明する新しいEnumの書き方で書かれているのでそんなことはなくなりました。</p>

<h2>新しいEnumの書き方</h2>

<p>上の例を新しい書き方に直してみましょう。</p>

<p>``` objc
// Xcode 4.4 or later
typedef enum CTRAdPosition : NSUInteger
{</p>

<pre><code>CTRAdPositionViewTop = 0, // default
CTRAdPositionViewBottom
</code></pre>

<p>} CTRAdPosition;
```</p>

<p><code>typedef enum</code>のあとに新しい型名と元になる型をコロン区切りで記述し、列挙と型定義を同時に行っていますね。<br/>
以前とは違い型定義が先にくることで何の列挙か理解しやすくなりました。また、この書き方をするだけで目的の型に合致した補完候補が出てくるようになります。</p>

<p>さらに <strong><code>NS_ENUM</code></strong>というマクロも用意されており、これを使えばより簡潔に書けます。</p>

<p>``` objc
// Xcode 4.4 or later
typedef NS_ENUM(NSInteger, CTRAdPosition)
{</p>

<pre><code>CTRAdPositionViewTop = 0, // default
CTRAdPositionViewBottom
</code></pre>

<p>};
```</p>

<p>マクロの第1引数に元の型、第2引数に新しい型名を渡すようにします。</p>

<p>他にもEnumのマクロとして <strong><code>NS_OPTIONS</code></strong>があり、中身は<code>NS_ENUM</code>と同じですが使うべき用途が異なります。<br/>
OPTIONSと付くだけあり、列挙した項目を複数指定できるビット演算を使ったenumのときに使用します。</p>

<p>``` objc
// Xcode 4.4 or later
typedef NS_OPTIONS(NSUInteger, CTRAdType)
{</p>

<pre><code>CTRAdTypeNone   = 0,
CTRAdTypeIAd    = 1 &lt;&lt; 0,
CTRAdTypeAdMob  = 1 &lt;&lt; 1,
CTRAdTypeHomeAd = 1 &lt;&lt; 2,
</code></pre>

<p>};
```</p>

<p>上の例は、表示する広告の種類を指定する際、複数選択できることを示しています。ただ、<code>CTRAdTypeNone</code>は表示しないの一択ですので、ビット演算から外れ、0が割り当てられています。</p>
]]></content>
  </entry>
  
</feed>
